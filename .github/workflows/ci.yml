on:
  push:
    branches: [ feature/*, develop ]
  pull_request:
    branches: [ main, release, develop ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Validate data (Great Expectations)
        run: |
          # 1. Instalar Great Expectations. Es importante usar `--user`
          # para forzar la instalación en el directorio de binarios del usuario (~/.local/bin),
          # que es más consistente en entornos como GitHub Actions.
          pip install great_expectations --user
          
          # 2. Encontrar la ruta exacta del directorio de binarios donde pip instala los scripts.
          # Esto es crucial porque puede variar. `python -m site --user-base` nos da la base de la instalación del usuario.
          USER_SITE_BIN=$(python -c "import site; print(site.USER_BASE + '/bin')")
          
          # 3. Construir la ruta completa al ejecutable de great_expectations.
          GREAT_EXPECTATIONS_CMD="$USER_SITE_BIN/great_expectations"
          
          # 4. Verificar si el ejecutable existe en esa ruta (para depuración).
          echo "Buscando Great Expectations en: $GREAT_EXPECTATIONS_CMD"
          if [ -f "$GREAT_EXPECTATIONS_CMD" ]; then
            echo "¡Ejecutable encontrado!"
            # 5. Ejecutar el comando de Great Expectations usando la ruta completa.
            "$GREAT_EXPECTATIONS_CMD" checkpoint run my_checkpoint
          else
            echo "Error fatal: El ejecutable great_expectations NO se encontró en $GREAT_EXPECTATIONS_CMD."
            echo "Contenido del directorio de binarios del usuario ($USER_SITE_BIN):"
            ls -l "$USER_SITE_BIN"
            exit 1 # Fallar el job si no se encuentra el ejecutable.
          fi
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          pip install flake8 black
          black --check .
          flake8 .

      - name: Run pytest
        run: |
          pytest --junitxml=reports/junit.xml

      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: reports/junit.xml dime como puedo probar